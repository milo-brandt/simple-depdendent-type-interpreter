{% include "path_bind_loose.hpp.template" %}
{% macro lookup(ref_kind, pointer_kind) %}
  inline {{class_name}}{{ref_kind}} lookup({{class_name}}{{ref_kind}} in, {{path.class_name}} const& path) {
    {{class_name}}{{pointer_kind}} ret = &in;
    for(auto step : path.steps) {
      ret = ret->visit([&]<class T>(T{{ref_kind}} part) -> {{class_name}}{{pointer_kind}} {
        {%- for component in components %}
        if constexpr(std::is_same_v<T, {{ component.name}}>) {
          switch(step) {
          {%- for member in component.base_members %}
          case {{ loop.index0 }}: return {{ member.part_access("part") }};
          {%- endfor %}
          default: std::terminate();
          }
        }
        {%- endfor %}
      });
    }
    return *ret;
  }
  {% endmacro %}
  {{lookup("&","*")}}
  {{lookup(" const&", " const*")}}
