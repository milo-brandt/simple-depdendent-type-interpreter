{% macro visitor_requirement(Visitor, RefKind) -%}
requires({{Visitor}} visitor
{%- for component in components -%}
, {{component.name}}{{RefKind}} {{component.name|underscore}}
{%- endfor -%}
) {
	{%- for component in components %}
	std::forward<{{Visitor}}>(visitor)(std::forward<{{component.name}}{{RefKind}}>({{component.name|underscore}}));
	{%- endfor %}
	typename std::common_type_t<{%- for component in components -%}std::invoke_result_t<{{Visitor}}, {{component.name}}{{RefKind}}>{% if not loop.last %}, {% endif %}{% endfor %} >;
}
{%- endmacro %}

{%if base_namespace %}
namespace {{base_namespace}} {
{%- endif %}
{%for component in components %}
	struct {{component.name}};
{%- endfor %}

	class {{class_name}} {
		struct Impl;
		mdb::Indirect<Impl> data;
	public:
		{%- for component in components %}
		{{class_name}}({{component.name}} arg);
		{%- endfor %}
		{% for component in components %}
		{{component.name}}& get_{{component.name|underscore}}() &;
		{{component.name}} const& get_{{component.name|underscore}}() const&;
		{{component.name}}&& get_{{component.name|underscore}}() &&;
		{{component.name}}* get_if_{{component.name|underscore}}();
		{{component.name}} const* get_if_{{component.name|underscore}}() const;
		{% endfor %}
		template<class Visitor> requires ({{visitor_requirement("Visitor&&","&")}})
		decltype(auto) visit(Visitor&&) &;
		template<class Visitor> requires ({{visitor_requirement("Visitor&&"," const&")}})
		decltype(auto) visit(Visitor&&) const&;
		template<class Visitor> requires ({{visitor_requirement("Visitor&&","&&")}})
		decltype(auto) visit(Visitor&&) &&;

	};
	{% for component in components -%}
	struct {{component.name}} {
{%- for member in component.members %}
		{{member.type}} {{member.name}};
{%- endfor %}
	};
	{% endfor %}

	struct {{class_name}}::Impl {
		std::variant<
{%- for component in components -%}{{component.name}}{% if not loop.last %}, {% endif %}{% endfor -%}
		> data;
	};
	{% for component in components %}
	{{class_name}}::{{class_name}}({{component.name}} arg):data(mdb::in_place, std::move(arg)) {}
	{%- endfor %}
	{% for component in components %}
	{{component.name}}& {{class_name}}::get_{{component.name|underscore}}() & { return std::get<{{component.name}}>(data->data); }
	{{component.name}} const& {{class_name}}::get_{{component.name|underscore}}() const& { return std::get<{{component.name}}>(data->data); }
	{{component.name}}&& {{class_name}}::get_{{component.name|underscore}}() && { return std::move(std::get<{{component.name}}>(data->data)); }
	{{component.name}}* {{class_name}}::get_if_{{component.name|underscore}}() { return std::get_if<{{component.name}}>(&data->data); }
	{{component.name}} const* {{class_name}}::get_if_{{component.name|underscore}}() const { return std::get_if<{{component.name}}>(&data->data); }
	{% endfor %}

	template<class Visitor> requires ({{visitor_requirement("Visitor&&","&")}})
	decltype(auto) {{class_name}}::visit(Visitor&& visitor) & {
		return std::visit(std::forward<Visitor>(visitor), data->data);
	}
	template<class Visitor> requires ({{visitor_requirement("Visitor&&"," const&")}})
	decltype(auto) {{class_name}}::visit(Visitor&& visitor) const& {
		return std::visit(std::forward<Visitor>(visitor), data->data);
	}
	template<class Visitor> requires ({{visitor_requirement("Visitor&&","&&")}})
	decltype(auto) {{class_name}}::visit(Visitor&& visitor) && {
		return std::visit(std::forward<Visitor>(visitor), std::move(data->data));
	}

{% if path_class -%}
	{%- include "path_bind.hpp.template" -%}
	{%- endif %}
{% if not no_match %}
{%- include "match.hpp.template" -%}
	{%-endif %}

{%- if base_namespace %}
}
{% endif %}
