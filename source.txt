axiom zero;
axiom succ;

axiom cons;
axiom nil;

declare at;
rule at zero (cons head tail) := head;
rule at (succ n) (cons head tail) := at n tail;

axiom apply;
axiom primitive;
axiom lambda;
axiom argument;

declare execute;
rule execute ctx (apply f x) := (execute ctx f) (execute ctx x);
rule execute ctx (primitive v) := v;
rule execute ctx (argument n) := at n ctx;
rule execute ctx (lambda b) := \v.(execute (cons v ctx) b);

execute nil (apply (apply (primitive execute) (primitive nil)) (apply (primitive lambda) (apply (primitive argument) (primitive zero))));

execute nil (lambda (lambda (lambda (argument (succ (succ zero))))));
