In file included from Source/Tests/parser_test.cpp:1:
Source/Tests/../Parser/parser.hpp: In instantiation of ‘parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, std::optional<std::basic_string_view<char> >, {std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)> [with Inner = {std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>}]’:
Source/Tests/../Parser/parser.hpp:150:20:   required from ‘parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, std::optional<std::basic_string_view<char> >, {std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>&, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, {mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>}>::<lambda(Inner&& ...)>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, {}>::<lambda(Inner&& ...)> [with Inner = {}]’
Source/Tests/../Parser/parser.hpp:155:18:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&) [with Call = parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, std::optional<std::basic_string_view<char> >, {std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>&, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, {mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>}>::<lambda(Inner&& ...)>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, {}>::<lambda(Inner&& ...)>]’
Source/Tests/../Parser/parser.hpp:149:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
Source/Tests/../Parser/parser.hpp:149:25:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, Arg&&, Args&& ...) [with Call = const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&; Arg = std::optional<std::basic_string_view<char> >; Args = {std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}]’
Source/Tests/../Parser/parser.hpp:140:27:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::tuple<_Types ...>&&, Args&& ...) [with Call = const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&; TupleArgs = {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}; Args = {}]’
Source/Tests/../Parser/parser.hpp:161:33:   required from ‘parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)> [with Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2522:12:   required from ‘struct std::__invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2951:12:   required from ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2957:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:56:7:   required from here
Source/Tests/../Parser/parser.hpp:150:20: error: no match for call to ‘(const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>) (std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>)’
  150 |         return call(std::forward<Arg>(arg), std::forward<Inner>(inner)...);
      |                ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Source/Tests/../Parser/parser.hpp:150:20: note: candidate: ‘parser::standard::Result (*)(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)’ {aka ‘std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > (*)(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >)’} (conversion)
Source/Tests/../Parser/parser.hpp:150:20: note:   candidate expects 4 arguments, 5 provided
In file included from Source/Tests/parser_test.cpp:206:
Source/Tests/../Parser/expression_parser.hpp:31:17: note: candidate: ‘parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>’
   31 |     ), unpacked([](std::optional<std::string_view> arg_name, std::optional<Result> type_declaration, Result body) -> Result {
      |                 ^
Source/Tests/../Parser/expression_parser.hpp:31:17: note:   candidate expects 3 arguments, 4 provided
In file included from Source/Tests/../Parser/parser.hpp:10,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/tuple: In instantiation of ‘constexpr decltype(auto) std::__apply_impl(_Fn&&, _Tuple&&, std::index_sequence<_Ind ...>) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >; long unsigned int ..._Idx = {0, 1, 2}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]’:
/usr/include/c++/10/tuple:1738:31:   required from ‘constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >]’
Source/Tests/../Parser/parser.hpp:139:24:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::tuple<_Types ...>&&, Args&& ...) [with Call = const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&; TupleArgs = {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}; Args = {}]’
Source/Tests/../Parser/parser.hpp:161:33:   required from ‘parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)> [with Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2522:12:   required from ‘struct std::__invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2951:12:   required from ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2957:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:56:7:   required from here
/usr/include/c++/10/tuple:1727:27: error: no matching function for call to ‘__invoke(parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>, std::__tuple_element_t<0, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >, std::__tuple_element_t<1, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >, std::__tuple_element_t<2, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >)’
 1727 |       return std::__invoke(std::forward<_Fn>(__f),
      |              ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
 1728 |       std::get<_Idx>(std::forward<_Tuple>(__t))...);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/10/variant:42,
                 from Source/Tests/../Parser/parser.hpp:5,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/bits/invoke.h:89:5: note: candidate: ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)’
   89 |     __invoke(_Callable&& __fn, _Args&&... __args)
      |     ^~~~~~~~
/usr/include/c++/10/bits/invoke.h:89:5: note:   template argument deduction/substitution failed:
/usr/include/c++/10/bits/invoke.h: In substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Args = {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}]’:
/usr/include/c++/10/tuple:1727:27:   required from ‘constexpr decltype(auto) std::__apply_impl(_Fn&&, _Tuple&&, std::index_sequence<_Ind ...>) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >; long unsigned int ..._Idx = {0, 1, 2}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]’
/usr/include/c++/10/tuple:1738:31:   required from ‘constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >]’
Source/Tests/../Parser/parser.hpp:139:24:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::tuple<_Types ...>&&, Args&& ...) [with Call = const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&; TupleArgs = {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}; Args = {}]’
Source/Tests/../Parser/parser.hpp:161:33:   required from ‘parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)> [with Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2522:12:   required from ‘struct std::__invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2951:12:   required from ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2957:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:56:7:   required from here
/usr/include/c++/10/bits/invoke.h:89:5: error: no type named ‘type’ in ‘struct std::__invoke_result<parser::detail::unpack_call<const parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)>&, {std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::optional<std::basic_string_view<char> >&&, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>, std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >’
In file included from /usr/include/c++/10/bits/move.h:57,
                 from /usr/include/c++/10/bits/stl_pair.h:59,
                 from /usr/include/c++/10/bits/stl_algobase.h:64,
                 from /usr/include/c++/10/bits/char_traits.h:39,
                 from /usr/include/c++/10/string:40,
                 from Source/Tests/../Parser/parser.hpp:4,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/type_traits: In substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’:
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:56:7:   required from here
/usr/include/c++/10/type_traits:2957:11: error: no type named ‘type’ in ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
 2957 |     using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;
      |           ^~~~~~~~~~~~~~~
In file included from Source/Tests/parser_test.cpp:1:
Source/Tests/../Parser/parser.hpp: In instantiation of ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::optional<parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>]’:
Source/Tests/../Parser/expression_parser.hpp:56:7:   required from here
Source/Tests/../Parser/parser.hpp:192:12: error: no type named ‘type’ in ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::optional<std::basic_string_view<char> >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::standard::Result)> >::<lambda(Args&& ...)>, std::tuple<std::optional<std::basic_string_view<char, std::char_traits<char> > >, std::optional<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
  192 |     return [parse, map](std::string_view str) -> ParseResult<Type> {
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |       auto r = parse(str);
      |       ~~~~~~~~~~~~~~~~~~~~
  194 |       if(auto* success = get_if_success(&r)) {
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |         return ParseSuccess{map(std::move(success->value)), success->remaining};
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  196 |       } else {
      |       ~~~~~~~~
  197 |         return std::move(get_error(r));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  198 |       }
      |       ~     
  199 |     };
      |     ~       
In file included from /usr/include/c++/10/bits/move.h:57,
                 from /usr/include/c++/10/bits/stl_pair.h:59,
                 from /usr/include/c++/10/bits/stl_algobase.h:64,
                 from /usr/include/c++/10/bits/char_traits.h:39,
                 from /usr/include/c++/10/string:40,
                 from Source/Tests/../Parser/parser.hpp:4,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/type_traits: In substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::standard::<lambda(parser::tree::Node)>::<lambda(parser::tree::Node)>; _Args = {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}]’:
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::standard::<lambda(parser::tree::Node)>::<lambda(parser::tree::Node)>]’
Source/Tests/../Parser/expression_parser.hpp:65:10:   required from here
/usr/include/c++/10/type_traits:2957:11: error: no type named ‘type’ in ‘struct std::invoke_result<parser::standard::<lambda(parser::tree::Node)>::<lambda(parser::tree::Node)>, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >’
 2957 |     using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;
      |           ^~~~~~~~~~~~~~~
In file included from Source/Tests/parser_test.cpp:1:
Source/Tests/../Parser/parser.hpp: In instantiation of ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::standard::<lambda(parser::tree::Node)>::<lambda(parser::tree::Node)>]’:
Source/Tests/../Parser/expression_parser.hpp:65:10:   required from here
Source/Tests/../Parser/parser.hpp:192:12: error: no type named ‘type’ in ‘struct std::invoke_result<parser::standard::<lambda(parser::tree::Node)>::<lambda(parser::tree::Node)>, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >’
  192 |     return [parse, map](std::string_view str) -> ParseResult<Type> {
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |       auto r = parse(str);
      |       ~~~~~~~~~~~~~~~~~~~~
  194 |       if(auto* success = get_if_success(&r)) {
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |         return ParseSuccess{map(std::move(success->value)), success->remaining};
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  196 |       } else {
      |       ~~~~~~~~
  197 |         return std::move(get_error(r));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  198 |       }
      |       ~     
  199 |     };
      |     ~       
Source/Tests/../Parser/parser.hpp: In instantiation of ‘constexpr auto parser::bind(Parser, F) [with Parser = parser::bind_fold<parser::detail::HoldExpression<parser::standard::termMBParserDetail>, parser::standard::<lambda(parser::standard::Result&)> >::<lambda(std::string_view)>; F = parser::standard::<lambda(parser::tree::Node)>]’:
Source/Tests/../Parser/expression_parser.hpp:68:6:   required from here
Source/Tests/../Parser/parser.hpp:204:11: error: no type named ‘type’ in ‘struct std::invoke_result<parser::standard::<lambda(parser::tree::Node)>, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >’
  204 |     using Type = ParserTypeOf<std::invoke_result_t<F, ParserType> >;
      |           ^~~~
Source/Tests/../Parser/parser.hpp:205:12: error: no type named ‘type’ in ‘struct std::invoke_result<parser::standard::<lambda(parser::tree::Node)>, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >’
  205 |     return [parse, map](std::string_view str) -> ParseResult<Type> {
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  206 |       auto r = parse(str);
      |       ~~~~~~~~~~~~~~~~~~~~
  207 |       if(auto* success = get_if_success(&r)) {
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  208 |         return map(std::move(success->value))(success->remaining);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  209 |       } else {
      |       ~~~~~~~~
  210 |         return std::move(get_error(r));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  211 |       }
      |       ~     
  212 |     };
      |     ~       
Source/Tests/../Parser/parser.hpp: In instantiation of ‘parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, std::basic_string_view<char>, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)> [with Inner = {mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>}]’:
Source/Tests/../Parser/parser.hpp:150:20:   required from ‘parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, std::basic_string_view<char>, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>&, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, {mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>&, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, {mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>}>::<lambda(Inner&& ...)>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, {}>::<lambda(Inner&& ...)> [with Inner = {}]’
Source/Tests/../Parser/parser.hpp:155:18:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&) [with Call = parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, std::basic_string_view<char>, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>&, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, {mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>&, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, {mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>}>::<lambda(Inner&& ...)>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, {}>::<lambda(Inner&& ...)>]’
Source/Tests/../Parser/parser.hpp:149:25:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
Source/Tests/../Parser/parser.hpp:145:25:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::pair<_OIter1, _OIter2>&&, Args&& ...) [with Call = parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, std::basic_string_view<char>, {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}>::<lambda(Inner&& ...)>; First = mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>; Second = mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>; Args = {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}]’
Source/Tests/../Parser/parser.hpp:149:25:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, Arg&&, Args&& ...) [with Call = const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&; Arg = std::basic_string_view<char>; Args = {std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}]’
Source/Tests/../Parser/parser.hpp:140:27:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::tuple<_Types ...>&&, Args&& ...) [with Call = const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&; TupleArgs = {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}; Args = {}]’
Source/Tests/../Parser/parser.hpp:161:33:   required from ‘parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)> [with Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2522:12:   required from ‘struct std::__invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2951:12:   required from ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2957:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:83:7:   required from here
Source/Tests/../Parser/parser.hpp:150:20: error: no match for call to ‘(const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>) (std::basic_string_view<char>, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow>)’
  150 |         return call(std::forward<Arg>(arg), std::forward<Inner>(inner)...);
      |                ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Source/Tests/../Parser/parser.hpp:150:20: note: candidate: ‘parser::tree::Node (*)(std::string_view, parser::tree::Node, parser::tree::Node)’ {aka ‘mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow> (*)(std::basic_string_view<char>, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>)’} (conversion)
Source/Tests/../Parser/parser.hpp:150:20: note:   candidate expects 4 arguments, 6 provided
In file included from Source/Tests/parser_test.cpp:206:
Source/Tests/../Parser/expression_parser.hpp:77:17: note: candidate: ‘parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>’
   77 |     ), unpacked([](std::string_view identifier, tree::Node domain, tree::Node codomain) -> tree::Node {
      |                 ^
Source/Tests/../Parser/expression_parser.hpp:77:17: note:   candidate expects 3 arguments, 5 provided
In file included from Source/Tests/../Parser/parser.hpp:10,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/tuple: In instantiation of ‘constexpr decltype(auto) std::__apply_impl(_Fn&&, _Tuple&&, std::index_sequence<_Ind ...>) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >; long unsigned int ..._Idx = {0, 1, 2}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]’:
/usr/include/c++/10/tuple:1738:31:   required from ‘constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >]’
Source/Tests/../Parser/parser.hpp:139:24:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::tuple<_Types ...>&&, Args&& ...) [with Call = const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&; TupleArgs = {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}; Args = {}]’
Source/Tests/../Parser/parser.hpp:161:33:   required from ‘parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)> [with Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2522:12:   required from ‘struct std::__invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2951:12:   required from ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2957:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:83:7:   required from here
/usr/include/c++/10/tuple:1727:27: error: no matching function for call to ‘__invoke(parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>, std::__tuple_element_t<0, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >, std::__tuple_element_t<1, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >, std::__tuple_element_t<2, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >)’
 1727 |       return std::__invoke(std::forward<_Fn>(__f),
      |              ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
 1728 |       std::get<_Idx>(std::forward<_Tuple>(__t))...);
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/10/variant:42,
                 from Source/Tests/../Parser/parser.hpp:5,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/bits/invoke.h:89:5: note: candidate: ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...)’
   89 |     __invoke(_Callable&& __fn, _Args&&... __args)
      |     ^~~~~~~~
/usr/include/c++/10/bits/invoke.h:89:5: note:   template argument deduction/substitution failed:
/usr/include/c++/10/bits/invoke.h: In substitution of ‘template<class _Callable, class ... _Args> constexpr typename std::__invoke_result<_Functor, _ArgTypes>::type std::__invoke(_Callable&&, _Args&& ...) [with _Callable = parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Args = {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}]’:
/usr/include/c++/10/tuple:1727:27:   required from ‘constexpr decltype(auto) std::__apply_impl(_Fn&&, _Tuple&&, std::index_sequence<_Ind ...>) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >; long unsigned int ..._Idx = {0, 1, 2}; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]’
/usr/include/c++/10/tuple:1738:31:   required from ‘constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>; _Tuple = std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >]’
Source/Tests/../Parser/parser.hpp:139:24:   required from ‘decltype(auto) parser::detail::unpack_call(Call&&, std::tuple<_Types ...>&&, Args&& ...) [with Call = const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&; TupleArgs = {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}; Args = {}]’
Source/Tests/../Parser/parser.hpp:161:33:   required from ‘parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)> [with Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2522:12:   required from ‘struct std::__invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2951:12:   required from ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
/usr/include/c++/10/type_traits:2957:11:   required by substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:83:7:   required from here
/usr/include/c++/10/bits/invoke.h:89:5: error: no type named ‘type’ in ‘struct std::__invoke_result<parser::detail::unpack_call<const parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)>&, {std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >}, {}>::<lambda(std::basic_string_view<char>&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >&&)>, std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >’
In file included from /usr/include/c++/10/bits/move.h:57,
                 from /usr/include/c++/10/bits/stl_pair.h:59,
                 from /usr/include/c++/10/bits/stl_algobase.h:64,
                 from /usr/include/c++/10/bits/char_traits.h:39,
                 from /usr/include/c++/10/string:40,
                 from Source/Tests/../Parser/parser.hpp:4,
                 from Source/Tests/parser_test.cpp:1:
/usr/include/c++/10/type_traits: In substitution of ‘template<class _Fn, class ... _Args> using invoke_result_t = typename std::invoke_result::type [with _Fn = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>; _Args = {std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}]’:
Source/Tests/../Parser/parser.hpp:191:11:   required from ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>]’
Source/Tests/../Parser/expression_parser.hpp:83:7:   required from here
/usr/include/c++/10/type_traits:2957:11: error: no type named ‘type’ in ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
 2957 |     using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;
      |           ^~~~~~~~~~~~~~~
In file included from Source/Tests/parser_test.cpp:1:
Source/Tests/../Parser/parser.hpp: In instantiation of ‘constexpr auto parser::map(Parser, F) [with Parser = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >}>::<lambda(std::string_view)>; F = parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>]’:
Source/Tests/../Parser/expression_parser.hpp:83:7:   required from here
Source/Tests/../Parser/parser.hpp:192:12: error: no type named ‘type’ in ‘struct std::invoke_result<parser::unpacked<parser::standard::<lambda(std::string_view, parser::tree::Node, parser::tree::Node)> >::<lambda(Args&& ...)>, std::tuple<std::basic_string_view<char, std::char_traits<char> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > > >’
  192 |     return [parse, map](std::string_view str) -> ParseResult<Type> {
      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  193 |       auto r = parse(str);
      |       ~~~~~~~~~~~~~~~~~~~~
  194 |       if(auto* success = get_if_success(&r)) {
      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  195 |         return ParseSuccess{map(std::move(success->value)), success->remaining};
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  196 |       } else {
      |       ~~~~~~~~
  197 |         return std::move(get_error(r));
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  198 |       }
      |       ~     
  199 |     };
      |     ~       
Source/Tests/../Parser/parser.hpp: In instantiation of ‘constexpr auto parser::branch(std::pair<_T1, _T2>, std::pair<Conditions, Actions>...) [with Condition = parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>; Action = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>; Conditions = {parser::<lambda(std::string_view)>}; Actions = {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}]’:
Source/Tests/../Parser/expression_parser.hpp:85:5:   required from here
Source/Tests/../Parser/parser.hpp:267:5: error: static assertion failed: All parsers must return same type in branch.
  267 |     static_assert((std::is_same_v<
      |     ^~~~~~~~~~~~~
Source/Tests/../Parser/parser.hpp: In instantiation of ‘parser::ParseResult<T> parser::detail::parse_branch(std::string_view, const std::pair<_OIter1, _OIter2>&, const Rest& ...) [with T = std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >; Condition = parser::<lambda(std::string_view)>; Action = parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>; Rest = {}; parser::ParseResult<T> = std::variant<parser::ParseSuccess<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::ParseError>; std::string_view = std::basic_string_view<char>]’:
Source/Tests/../Parser/parser.hpp:260:31:   required from ‘parser::ParseResult<T> parser::detail::parse_branch(std::string_view, const std::pair<_OIter1, _OIter2>&, const Rest& ...) [with T = std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> >; Condition = parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>; Action = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>; Rest = {std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >}; parser::ParseResult<T> = std::variant<parser::ParseSuccess<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::ParseError>; std::string_view = std::basic_string_view<char>]’
Source/Tests/../Parser/parser.hpp:274:42:   required from ‘parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)> [with auto:34 = {const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&}]’
/usr/include/c++/10/type_traits:2506:26:   required by substitution of ‘template<class _Fn, class ... _Args> static std::__result_of_success<decltype (declval<_Fn>()((declval<_Args>)()...)), std::__invoke_other> std::__result_of_other_impl::_S_test(int) [with _Fn = parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>; _Args = {const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&}]’
/usr/include/c++/10/type_traits:2517:55:   required from ‘struct std::__result_of_impl<false, false, parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&>’
/usr/include/c++/10/type_traits:138:12:   recursively required by substitution of ‘template<class _Result, class _Ret> struct std::__is_invocable_impl<_Result, _Ret, true, std::__void_t<typename _CTp::type> > [with _Result = std::__invoke_result<parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&>; _Ret = void]’
/usr/include/c++/10/type_traits:138:12:   required from ‘struct std::__and_<std::__is_invocable_impl<std::__invoke_result<parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&>, void, true, void>, std::__call_is_nothrow<std::__invoke_result<parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&>, parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&> >’
/usr/include/c++/10/type_traits:2979:12:   required from ‘struct std::is_nothrow_invocable<parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >&, const std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> >&>’
/usr/include/c++/10/tuple:1719:37:   required from ‘constexpr const bool std::__unpack_std_tuple<template<class _Fn, class ... _ArgTypes> struct std::is_nothrow_invocable, parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>, const std::tuple<std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >, std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> > >&>’
/usr/include/c++/10/tuple:1734:14:   required from ‘constexpr decltype(auto) std::apply(_Fn&&, _Tuple&&) [with _Fn = parser::branch<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>, {parser::<lambda(std::string_view)>}, {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}>::<lambda(std::string_view)>::<lambda(auto:34&& ...)>; _Tuple = const std::tuple<std::pair<parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)> >, std::pair<parser::<lambda(std::string_view)>, parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)> > >&]’
Source/Tests/../Parser/parser.hpp:273:24:   required from ‘constexpr auto parser::branch(std::pair<_T1, _T2>, std::pair<Conditions, Actions>...) [with Condition = parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>; Action = parser::sequence<{parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::detail::HoldExpression<parser::standard::expressionMBParserDetail, std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::no_result<parser::zero_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::sequence<{parser::no_result<parser::one_or_more<parser::char_predicate<parser::<lambda(char)> >::<lambda(std::string_view)> >::<lambda(std::string_view)> >::<lambda(std::string_view)>, parser::symbol(const char*)::<lambda(std::string_view)>}>::<lambda(std::string_view)>}>::<lambda(std::string_view)>; Conditions = {parser::<lambda(std::string_view)>}; Actions = {parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>}]’
Source/Tests/../Parser/expression_parser.hpp:85:5:   required from here
Source/Tests/../Parser/parser.hpp:258:31: error: could not convert ‘parser::map<parser::map<parser::symbol(const char*)::<lambda(std::string_view)>, parser::standard::<lambda(parser::Empty)> >::<lambda(std::string_view)>, parser::standard::termMBParserDetail::Detail::<lambda(std::string_view)> >::<lambda(std::string_view)>(str)’ from ‘variant<parser::ParseSuccess<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow> >, parser::ParseError>’ to ‘variant<parser::ParseSuccess<std::pair<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow>, mdb::SharedVariant<parser::tree_locator::Apply, parser::tree_locator::Identifier, parser::tree_locator::Lambda, parser::tree_locator::Arrow> > >, parser::ParseError>’
  258 |         return head.second(str);
      |                               ^
      |                               |
      |                               variant<parser::ParseSuccess<mdb::SharedVariant<parser::tree::Apply, parser::tree::Identifier, parser::tree::Lambda, parser::tree::Arrow> >, parser::ParseError>
