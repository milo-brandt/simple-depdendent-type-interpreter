block {
  axiom Nat : Type;
  axiom zero : Nat;
  axiom succ : Nat -> Nat;

  declare u_to_nat : U64 -> Nat;
  rule u_to_nat n = iterate Nat succ zero n;
  declare nat_to_u : Nat -> U64;
  rule nat_to_u zero = 0;
  rule nat_to_u (succ n) = add (nat_to_u n) 1;

  declare vec_cons_type : Type -> Nat -> Type;
  rule vec_cons_type T zero = Vector T;
  rule vec_cons_type T (succ n) = T -> (vec_cons_type T n);

  declare vec_cons_impl : (T : Type) -> (n : Nat) -> (base : Vector T) -> vec_cons_type T n;
  rule vec_cons_impl T zero base = base;
  rule vec_cons_impl T (succ n) base first = vec_cons_impl T n (push_vec _ base first);

  declare vec_cons : (T : Type) -> (n : Nat) -> vec_cons_type T n;
  rule vec_cons T n = vec_cons_impl T n (empty_vec _);

  let vec_cons_u64 = \T.\n.vec_cons T (u_to_nat n);

  axiom Unit : Type;
  axiom unit : Unit;

  axiom Hold : Type;
  axiom unhold : Hold;

  axiom ParseResult : Type -> Type;
  axiom success : (T : Type) -> T -> String -> ParseResult T;
  axiom failure : (T : Type) -> ParseResult T;

  declare if : (T : Type) -> Bool -> T -> T -> T;
  rule if T yes x y = x;
  rule if T no x y = y;

  declare is_success : (T : Type) -> ParseResult T -> Bool;
  rule is_success T (success T x rest) = yes;
  rule is_success T (failure T) = no;

  declare get_success : (T : Type) -> (result : ParseResult T) -> (if _ (is_success _ result) T Unit);
  rule get_success T (success T x rest) = x;
  rule get_success T (failure T) = unit;

  declare remove_prefix : U64 -> String -> String;
  rule remove_prefix n str = substr str n (sub (len str) n);

  let Parser = \T.String -> ParseResult T;

  declare held_bind_impl : (S : Type) -> (T : Type) -> ParseResult S -> (Hold -> S -> Parser T) -> ParseResult T;
  rule held_bind_impl S T (success S value rest) then = then unhold value rest;
  rule held_bind_impl S T (failure S) then = failure T;

  declare held_bind : (S : Type) -> (T : Type) -> Parser S -> (Hold -> S -> Parser T) -> Parser T;
  rule held_bind S T parser then = \str.held_bind_impl S T (parser str) then;

  declare pure : (T : Type) -> T -> Parser T;
  rule pure T x str = success T x str;

  declare pure_fail : (T : Type) -> Parser T;
  rule pure_fail T str = failure T;

  declare recognize : String -> Parser Unit;
  rule recognize symbol string =
    if _ (starts_with symbol string)
      (success _ unit (remove_prefix (len symbol) string))
      (failure _);

  declare or_default_impl : (T : Type) -> T -> String -> ParseResult T -> ParseResult T;
  rule or_default_impl T x str (success T value rest) = (success T value rest);
  rule or_default_impl T x str (failure T) = success T x str;

  declare or_default : (T : Type) -> T -> Parser T -> Parser T;
  rule or_default T x f = \str.or_default_impl T x str (f str);

  declare or_impl : (T : Type) -> String -> ParseResult T -> Parser T -> ParseResult T;
  rule or_impl T string (success T value rest) alternate = success T value rest;
  rule or_impl T string (failure T) alternate = alternate string;

  declare or : (T : Type) -> Parser T -> Parser T -> Parser T;
  rule or T parser alternate = \str.or_impl T str (parser str) alternate;

  declare kleene_star : (T : Type) -> Parser T -> Parser (Vector T);
  rule kleene_star T parser = block {
    declare held_recursor : Vector T -> Hold -> Parser (Vector T);
    rule held_recursor base unhold =
      or_default _ base \\
      held_bind _ _ parser (\hold.\next.held_recursor (push_vec _ base next) hold);

    held_recursor (empty_vec _) unhold
  };

  declare bind : (S : Type) -> (T : Type) -> Parser S -> (S -> Parser T) -> Parser T;
  rule bind S T f g = held_bind S T f (\.g);

  declare map : (S : Type) -> (T : Type) -> Parser S -> (S -> T) -> Parser T;
  rule map S T f g = bind S T f \x.pure T (g x);

  axiom Pair : (S : Type) -> (T : Type) -> Type;
  axiom pair : (S : Type) -> (T : Type) -> S -> T -> Pair S T;

  declare first : (S : Type) -> (T : Type) -> Pair S T -> S;
  rule first S T (pair S T s t) = s;
  declare second : (S : Type) -> (T : Type) -> Pair S T -> T;
  rule second S T (pair S T s t) = t;

  declare parse_lookup : (T : Type) -> Vector (Pair String T) -> Parser T;
  rule parse_lookup T table = block {
    declare recognize_pair : Pair String T -> Parser T;
    rule recognize_pair (pair String T symbol value) =
      map _ _ (recognize symbol) \.value;
    lfold_vec _ _
      (pure_fail _)
      (\parser.\next_pair.or _ parser (recognize_pair next_pair))
      table
  };

  declare parse_digit : Parser U64;
  rule parse_digit = parse_lookup U64 (vec_cons_u64 _ 10
    (pair _ _ "0" 0)
    (pair _ _ "1" 1)
    (pair _ _ "2" 2)
    (pair _ _ "3" 3)
    (pair _ _ "4" 4)
    (pair _ _ "5" 5)
    (pair _ _ "6" 6)
    (pair _ _ "7" 7)
    (pair _ _ "8" 8)
    (pair _ _ "9" 9)
  );

  declare parse_expr_held : Hold -> Parser U64;

  let parse_parenthesized_expr : Parser U64 =
    held_bind _ _ (recognize "(") \hold.\.
    bind _ _ (parse_expr_held hold) \ret.
    map _ _ (recognize ")") \.ret;

  let parse_integer : Parser U64 =
    bind _ _ parse_digit \first_digit.
    map _ _ (kleene_star _ parse_digit) \remaining_digits.
    lfold_vec _ _ first_digit (\x.\y.add (mul 10 x) y) remaining_digits;

  let parse_term = or _ parse_integer parse_parenthesized_expr;
  let parse_mul_extend = bind _ _ (recognize "*") \.parse_term;
  let parse_mul = bind _ _ parse_term \head.
    map _ _ (kleene_star _ parse_mul_extend) \after_terms.
    lfold_vec _ _ head mul after_terms;

  let parse_add_extend = bind _ _ (recognize "+") \.parse_mul;
  let parse_add = bind _ _ parse_mul \head.
    map _ _ (kleene_star _ parse_add_extend) \after_terms.
    lfold_vec _ _ head add after_terms;

  rule parse_expr_held unhold = parse_add;
  let parse_expr = parse_expr_held unhold;

  axiom Tree : Type;
  axiom node : Vector Tree -> Tree;
  let empty_tree = node (empty_vec Tree);

  declare parse_tree_held : Hold -> Parser Tree;
  declare parse_tree_nontrivial : Parser Tree;
  rule parse_tree_held unhold =
    map _ _ (kleene_star _ parse_tree_nontrivial) node;
  rule parse_tree_nontrivial =
    held_bind _ _ (recognize "(") \hold.\.
    bind _ _ (parse_tree_held hold) \ret.
    map _ _ (recognize ")") \.ret;
  let parse_tree = parse_tree_held unhold;

  declare print_tree : Tree -> String;
  rule print_tree (node vec) = block {
      let print_inner = \value.cat (cat "{" (print_tree value)) "}";
      lfold_vec _ _ "" (\str.\next.cat str (print_inner next)) vec
  };

  parse_expr "(1+5*2)*(5*3+2)"

}
