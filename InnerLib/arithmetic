import * from nat;
import * from bool;
import * from witness;

block {

  declare eq : U64 -> U64 -> Bool;
  declare lt : U64 -> U64 -> Bool;
  declare gt : U64 -> U64 -> Bool;
  declare lte : U64 -> U64 -> Bool;
  declare gte : U64 -> U64 -> Bool;

  declare zero_min : (x : U64) -> Witness (lte 0 x);
  declare lte_refl : (x : U64) -> Witness (lte x x);

  declare add : U64 -> U64 -> U64;
  declare sub : U64 -> U64 -> U64;
  declare mul : U64 -> U64 -> U64;
  declare idiv : U64 -> (y : U64) -> Witness (gt y 0) -> U64;
  declare mod : U64 -> (y : U64) -> Witness (gt y 0) -> U64;

  declare to_nat : U64 -> Nat;

  full_module "arithmetic.so"
  [
    module_entry _ "" zero,
    module_entry _ "" succ,
    module_entry _ "" witness,
    module_entry _ "" yes,
    module_entry _ "" no,
    module_entry _ "eq" eq,
    module_entry _ "lt" lt,
    module_entry _ "gt" gt,
    module_entry _ "lte" lte,
    module_entry _ "gte" gte,
    module_entry _ "zero_min" zero_min,
    module_entry _ "lte_refl" lte_refl,
    module_entry _ "add" add,
    module_entry _ "sub" sub,
    module_entry _ "mul" mul,
    module_entry _ "idiv" idiv,
    module_entry _ "mod" mod,
    module_entry _ "to_nat" to_nat
  ]
}
