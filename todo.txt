Need better type utilities

Add test to ensure that axioms can't be defined by rules

Need to ensure that indeterminates are not defined from contexts with more assumptions.
Need to re-add support for U64s, Strings, Vectors.
* For Data: Should add a way to internally destructure pairs of things (for assumptions)
  - might accomplish this by adding a method to check whether two pieces of data are "shape-compatible"
    and, if so, to list all pairs that need to align for them to be equal.

Verify should probably allow deduction of holes *defined within verify itself*.

it crashes if there's an empty string (or empty string after import header)

*************
High priority
*************
- Add automated testing
- Add "match" statement!

- Add an IO monad
- Add a system of traits
- Add a module system
- Add possibility for hidden arguments

************
Mid priority (as needed)
************
- Might consider allowing pattern matching through Data?
- Add destructuring Let statement
- Optimize expression contexts.
  - Probably faster to use shared_ptrs to avoid copying.
  - Can organize rules by their head.
  - Can add memoization (even possibly allow unique-ing of expressions)
  - Could refactor to a system of events and callbacks to avoid re-checking expressions when nothing's changed

************
Low priority
************
- Allow easy deduction of parts of rules - e.g. write unwrap _ (wrap _ x) = x.
- Revamp web interface
- Add other rules for equation solving
  - e.g. elimination of variables not held in common, expansion of tuple-like types,

- Archive generation should be more extensible - doesn't make sense to have internals of instruction.hpp in parser_tree.py
