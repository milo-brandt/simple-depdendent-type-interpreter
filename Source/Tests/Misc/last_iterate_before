# TEST BEGIN
# TEST NAME A complex definition returning the last iterate before hitting zero, using a local definition defined by subclauses.
# TEST MUST_COMPILE

block {
  axiom Bool : Type;
  axiom yes : Bool;
  axiom no : Bool;

  axiom Nat : Type;
  axiom zero : Nat;
  axiom succ : Nat -> Nat;

  declare last_nonzero_iterate : Nat -> (Nat -> Nat) -> Nat -> Nat;
  last_nonzero_iterate zero f base = zero; # return zero as a placeholder for failure
  last_nonzero_iterate (succ max_steps) f base = block {
    let next_iterate = f base;
    declare ret : Nat;
    ret where next_iterate = zero = base;
    ret where next_iterate = succ _ = last_nonzero_iterate max_steps f (f base);
    ret
  };

  declare pred : Nat -> Nat;
  pred zero = zero;
  pred (succ n) = n;

  declare pred_twice : Nat -> Nat;
  pred_twice zero = zero;
  pred_twice (succ zero) = zero;
  pred_twice (succ (succ n)) = n;

  let big = succ \\ succ \\ succ \\ succ \\ succ \\ succ \\ succ \\ succ \\ succ \\ zero;

  verify last_nonzero_iterate big pred_twice zero = zero;
  verify last_nonzero_iterate big pred_twice (succ zero) = succ zero;
  verify last_nonzero_iterate big pred_twice (succ \\ succ zero) = succ \\ succ zero;
  verify last_nonzero_iterate big pred_twice (succ \\ succ \\ succ zero) = succ zero;
  verify last_nonzero_iterate big pred_twice (succ \\ succ \\ succ \\ succ zero) = succ \\ succ zero;
  verify last_nonzero_iterate big pred_twice (succ \\ succ \\ succ \\ succ \\ succ zero) = succ zero;
  verify last_nonzero_iterate big pred_twice (succ \\ succ \\ succ \\ succ \\ succ \\ succ zero) = succ \\ succ zero;

  verify last_nonzero_iterate big pred zero = zero;
  verify last_nonzero_iterate big pred (succ zero) = succ zero;
  verify last_nonzero_iterate big pred (succ \\ succ zero) = succ zero;
  verify last_nonzero_iterate big pred (succ \\ succ \\ succ zero) = succ zero;
  verify last_nonzero_iterate big pred (succ \\ succ \\ succ \\ succ zero) = succ zero;
  verify last_nonzero_iterate big pred (succ \\ succ \\ succ \\ succ \\ succ zero) = succ zero;
  verify last_nonzero_iterate big pred (succ \\ succ \\ succ \\ succ \\ succ \\ succ zero) = succ zero;

  Nat
}
