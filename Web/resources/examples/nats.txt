block {
  # Declare the natural numbers to be a type with two constructors, zero and succ.
  axiom Nat : Type;
  axiom zero : Nat;
  axiom succ : Nat -> Nat;

  # Use pattern matching to define a function iterate with the property that
  # iterate f x n = f(f(...f(x)...)) where "f" appears n times. (i.e. f^n(x))
  declare iterate : (T : Type) -> (T -> T) -> T -> Nat -> T;
  iterate T f base zero = base;
  iterate T f base (succ n) = f (iterate T f base n);

  # Define the first arithmetic few operations iterations.
  declare add : Nat -> Nat -> Nat;
  add x y = iterate _ succ x y;

  declare mul : Nat -> Nat -> Nat;
  mul x y = iterate _ (add x) zero y;

  declare exp : Nat -> Nat -> Nat;
  exp x y = iterate _ (mul x) (succ zero) y;

  # Try out the functions. Note a \\ b c \\ d e is syntax sugar for a (b c (d e))
  exp (succ \\ succ zero) (succ \\ succ \\ succ \\ succ \\ succ \\ zero)
}
