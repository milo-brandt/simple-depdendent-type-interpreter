block {
  # Examples using the built-in vector type. These use the following builtins:
  # empty_vec : (T : Type) -> Vector T                 [Constructs an empty vector]
  # push_vec : (T : Type) -> Vector T -> T -> Vector T [Extend a vector by one element]
  # lfold_vec : (Accumulator : Type)
  #          -> (T : Type)
  #          -> (start : Accumulator)
  #          -> (op : Accumulator -> T -> Accumulator)
  #          -> (vec : Vector T)
  #          -> Accumulator
  # Defined so that lfold_vec _ _ start op [x, y, z] yields op (op (op start x) y) z

  # Note that you can use the "Evaluate in Context" box to type in such built-ins
  # and view their type.

  # Define a function which concatenates vectors.
  # e.g. concat _ [x, y] [z, w] = [x, y, z, w]
  declare concat : (T : Type) -> Vector T -> Vector T -> Vector T;
  concat T v1 v2 = lfold_vec _ _ v1 (push_vec _) v2;

  # Take a vector of vectors and yield a vector
  declare flatten : (T : Type) -> Vector (Vector T) -> Vector T;
  flatten T v = lfold_vec _ _ (empty_vec _) (concat _) v;

  # Map a vector by a function
  # e.g. map _ _ f [x, y] = [f x, f y]
  declare map : (S : Type) -> (T : Type) -> (S -> T) -> Vector S -> Vector T;
  map S T f lhs = lfold_vec _ _ (empty_vec _) (\vec.\next.push_vec _ vec (f next)) lhs;

  flatten _ [[1, 2], [3, 4], [5, 6]]
}
